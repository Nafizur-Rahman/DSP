1.%sampling,quantization and coding

clc
close all;
clear all;

disp(' Input function ');
% INPUT FUNCTION 
fprintf('\n');
A=input(' Amplitude of Transmitting signal : ');
fprintf('\n\n');
disp(' Transmitting Function ');
%  transmitting signal generation 
f=100;
T=1/f;
t=0:T/100:2*T;
y=A*sin(2*pi*f*t);
figure(1);
plot(t,y,'linewidth',3);
ylabel(' Amplitude(volt) ')
xlabel('time(Sec)');
title(' Transmitting Signal ');

% sampling 
Ts=T/20;
Fs=1/Ts;
n=1:1:2*T/Ts;
y1=A*sin(2*pi*f*n*Ts);
figure(2);
stem(n,y1);
ylabel(' Amplitude(volt) ')
xlabel('descrete time');
title(' Discrete Time signal Signal after sampling ');

% Aditional of DC Level 
y2=A+y1;
figure(3);
stem(n,y2);
ylabel(' Amplitude(volt) ')
xlabel('descrete time');
title('DC Level + Discrete Time signal Signal ');

% Quamtization Signal 
y3=round(y2);
figure(4);
stem(n,y3);
ylabel(' Amplitude(volt) ')
xlabel('descrete time');
title('Quantized signal  ');

% Binary information Generation
y4=dec2bin(y3);
Bi=y4


2.%DFT of a sequence
N=input('Enter the length of sequence=');
x=input('Enter the sequence=');
n=[0:1:N-1];
k=[0:1:N-1];
wN=exp(-j*2*pi/N);
nk=n'*k;
wNnk=wN.^nk;
Xk=x*wNnk;
disp('Xk=');
disp(Xk);
mag=abs(Xk)
subplot(2,1,1);
stem(k,mag);
grid on;
xlabel('.......>k');
title('MAGNITUDE OF FOURIER TRANSFORM');
ylabel('Magnitude');
phase=angle(Xk)
subplot(2,1,2);
stem(k,phase);
grid on;
xlabel('.........>k');
title('PHASE OF FOURIER TRANSFORM');
ylabel('Phase');


3.%IDFT of a sequence
Xk=input('Enter X(K)=');
[N,M]=size(Xk);
if M~=1;
    Xk=Xk.';
    N=M;
end;
xn=zeros(N,1);
k=0:N-1;
for n=0:N-1;

    xn(n+1)=exp(j*2*pi*k*n/N)*Xk;

end;

xn=xn/N;
disp('x(n)=');
disp(xn);
plot(xn);
grid on;
plot(xn);
stem(k,xn);
xlabel('....>n');
ylabel('........>Magnitude');
title('IDEF OF A SEQUENCE');

4.%fourier transformation
clear
 N=250;
 ts=.0002;
 t=[0:N-1]*ts;
 x=cos(2*pi*100*t)+cos(2*pi*500*t)+cos(2*pi*800*t);
 subplot(2,1,1)
 plot(t,x)
  k=0;
 for f=0:1:800
k=k+1;
X(k)=trapz(t,x.*exp(-j*2*pi*f*t));
end
 f=0:800;
 subplot(2,1,2)
 plot(f, abs(X))



5. %Z trnsformation find roots
 clc
clear
z=roots([1,0,0,1])
p=roots([1,0,2,0,1])



6. %Z trnsformation find poles and zeros
 clc
clear
num=[1,0,0,1];
den=[1,0,2,0,1];
systf=tf(num,den)
pzmap(systf)



7.% Define a simple low-pass filter

fs = 1000; % Sampling frequency (Hz)
fc = 50;   % Cutoff frequency of the filter (Hz)
order = 6; % Filter order (higher values yield steeper roll-off)

% Create a low-pass Butterworth filter
[b, a] = butter(order, fc / (fs/2), 'low');

% Generate a noisy signal
t = 0:1/fs:1; % Time vector
s=sin(2*pi*100*t)
signal = sin(2*pi*100*t) + 0.5*randn(size(t)); % Original signal + noise

% Apply the low-pass filter to remove high-frequency noise
filtered_signal = filter(b, a, signal);
figure;
subplot(3,1,1);
plot(t, s);
title('Original Signal');
xlabel('Time (s)');
ylabel('Amplitude');

% Plot the original and filtered signals
subplot(3,1,2);
plot(t, signal);
title('Original Signal (with Noise)');
xlabel('Time (s)');
ylabel('Amplitude');

subplot(3,1,3);
plot(t, filtered_signal);
title('Filtered Signal (Low-Pass)');
xlabel('Time (s)');
ylabel('Amplitude');


8.% Define a simple high-pass filter

fs = 1000; % Sampling frequency (Hz)
fc = 50;   % Cutoff frequency of the filter (Hz)
order = 6; % Filter order (higher values yield steeper roll-off)

% Create a low-pass Butterworth filter
[b, a] = butter(order, fc / (fs/2), 'high');

% Generate a noisy signal
t = 0:1/fs:1; % Time vector
s=sin(2*pi*100*t)
signal = sin(2*pi*100*t) + 0.5*randn(size(t)); % Original signal + noise

% Apply the low-pass filter to remove high-frequency noise
filtered_signal = filter(b, a, signal);
figure;
subplot(3,1,1);
plot(t, s);
title('Original Signal');
xlabel('Time (s)');
ylabel('Amplitude');

% Plot the original and filtered signals
subplot(3,1,2);
plot(t, signal);
title('Original Signal (with Noise)');
xlabel('Time (s)');
ylabel('Amplitude');

subplot(3,1,3);
plot(t, filtered_signal);
title('Filtered Signal (Low-Pass)');
xlabel('Time (s)');
ylabel('Amplitude');



9.% Define a simple band-pass filter

fs = 1000;      % Sampling frequency (Hz)
f_low = 50;     % Lower cutoff frequency of the filter (Hz)
f_high = 150;   % Upper cutoff frequency of the filter (Hz)
order = 6;      % Filter order (higher values yield steeper roll-off)

% Create a band-pass Butterworth filter
[b, a] = butter(order, [f_low/(fs/2), f_high/(fs/2)], 'bandpass');

% Generate a signal with a frequency component within the passband
t = 0:1/fs:1;   % Time vector
signal = 0.5*sin(2*pi*75*t) + 0.3*sin(2*pi*125*t) + 0.2*sin(2*pi*300*t);

% Apply the band-pass filter to retain the frequency range of interest
filtered_signal = filter(b, a, signal);

% Plot the original and filtered signals
figure;
subplot(2,1,1);
plot(t, signal);
title('Original Signal (with Frequency Components)');
xlabel('Time (s)');
ylabel('Amplitude');

subplot(2,1,2);
plot(t, filtered_signal);
title('Filtered Signal (Band-Pass)');
xlabel('Time (s)');
ylabel('Amplitude');

10.%unit step function

clc
close all
clear all
%range in x axis(-10 to 10)

n=-10:10

n0=0

%if true return 1 

u=(n-n0>=0)

stem(n,u)

11.%delta function

clc
close all
clear all
%range in x axis(-10 to 10)

n=-10:10

n0=0
%if true return 1 
u=(n-n0==0)

stem(n,u)

12.%ramp function

clc
close all
clear all
%range in x axis(-10 to 10)

n=-10:10

n0=0

u=n.*(n-n0==0)

stem(n,u)

13.%time shifting x[n] to x[n - 3]

clc
close all
clear all
x=[1,2,3,2,4]
nx=-2:2

nb=nx(1)+3

ne=nx(length(x))+3

n1=nb:ne

subplot(2,1,1)

stem(nx,x);
title('Graphical representation of x(n)')

subplot(2,1,2)

stem(n1,x);
title('Graphical representation of x(n - 3)')

14.%time scaling

clc
close all
clear all
x=[1,2,3,2,4]
nx=-2:2

nb=3.*nx(1)

ne=3.*nx(length(x))

n1=nb:3:ne

subplot(2,1,1)

stem(nx,x);
title('Graphical representation of x(n)')

subplot(2,1,2)

stem(n1,x);
title('Graphical representation of x(3n)')

15.%folding or timereversal

clc
close all
clear all
x=[1,2,3,2,4]
nx=-2:2

nb=(-1).*nx(1)

ne=(-1).*nx(length(x))

n1=ne:nb

subplot(2,1,1)

stem(nx,x);
title('Graphical representation of x(n)')

x1=fliplr(x);

subplot(2,1,2)

stem(n1,x1);
title('Graphical representation of x(-n)')