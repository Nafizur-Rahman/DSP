1. Sampling, Quantization, and Coding

import numpy as np
import matplotlib.pyplot as plt

# Input function
A = float(input('Amplitude of Transmitting signal: '))

# Transmitting signal generation
f = 100
T = 1 / f
t = np.arange(0, 2*T, T/100)
y = A * np.sin(2 * np.pi * f * t)
plt.figure(1)
plt.plot(t, y, linewidth=3)
plt.ylabel('Amplitude (volt)')
plt.xlabel('time (Sec)')
plt.title('Transmitting Signal')

# Sampling
Ts = T / 20
n = np.arange(0, 2*T/Ts)
y1 = A * np.sin(2 * np.pi * f * n * Ts)
plt.figure(2)
plt.stem(n, y1)
plt.ylabel('Amplitude (volt)')
plt.xlabel('discrete time')
plt.title('Discrete Time Signal after Sampling')

# Additional of DC Level
y2 = A + y1
plt.figure(3)
plt.stem(n, y2)
plt.ylabel('Amplitude (volt)')
plt.xlabel('discrete time')
plt.title('DC Level + Discrete Time Signal')

# Quantization Signal
y3 = np.round(y2)
plt.figure(4)
plt.stem(n, y3)
plt.ylabel('Amplitude (volt)')
plt.xlabel('discrete time')
plt.title('Quantized Signal')
plt.show()



2. DFT of a Sequence
import numpy as np
import matplotlib.pyplot as plt

N = int(input('Enter the length of sequence: '))
x = np.array(input('Enter the sequence (comma-separated values): ').split(','), dtype=float)
n = np.arange(0, N)
k = np.arange(0, N)
nk = np.outer(n, k)
wNnk = np.exp(-2j * np.pi / N * nk)
Xk = np.dot(x, wNnk)
mag = np.abs(Xk)
phase = np.angle(Xk)

plt.figure(figsize=(8, 6))
plt.subplot(2, 1, 1)
plt.stem(k, mag)
plt.xlabel('k')
plt.title('Magnitude of Fourier Transform')
plt.ylabel('Magnitude')

plt.subplot(2, 1, 2)
plt.stem(k, phase)
plt.xlabel('k')
plt.title('Phase of Fourier Transform')
plt.ylabel('Phase')
plt.show()

3. IDFT of a Sequence

import numpy as np

Xk = np.array(input('Enter X(K) (comma-separated values): ').split(','), dtype=complex)
N = len(Xk)
k = np.arange(0, N)
n = np.arange(0, N)
nk = np.outer(n, k)
wNnk = np.exp(2j * np.pi / N * nk)
xn = np.dot(Xk, wNnk) / N
print('x(n)=')
print(xn)

4. Fourier Transformation
import numpy as np
import matplotlib.pyplot as plt

N = 250
ts = 0.0002
t = np.arange(0, N) * ts
x = np.cos(2 * np.pi * 100 * t) + np.cos(2 * np.pi * 500 * t) + np.cos(2 * np.pi * 800 * t)
X = np.fft.fft(x)
f = np.arange(0, 801)
plt.figure(figsize=(8, 6))
plt.subplot(2, 1, 1)
plt.plot(t, x)
plt.title('Original Signal')
plt.subplot(2, 1, 2)
plt.plot(f, np.abs(X))
plt.title('Magnitude of Fourier Transform')
plt.xlabel('Frequency')
plt.show()

5. Z Transformation - Find Roots
import numpy as np

z_roots = np.roots([1, 0, 0, 1])
p_roots = np.roots([1, 0, 2, 0, 1])

print("Z Transformation - Roots:")
print("Z Roots:", z_roots)
print("Poles:", p_roots)

6. Z Transformation - Poles and Zeros

import numpy as np
import scipy.signal as signal

num = [1, 0, 0, 1]
den = [1, 0, 2, 0, 1]
sys = signal.TransferFunction(num, den)
print("Z Transformation - Poles and Zeros:")
print("Zeros:", sys.zeros)
print("Poles:", sys.poles)

7. Low-Pass Filter (Python Equivalent)

import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, lfilter

fs = 1000  # Sampling frequency (Hz)
fc = 50    # Cutoff frequency of the filter (Hz)
order = 6  # Filter order

# Create a low-pass Butterworth filter
b, a = butter(order, fc / (fs/2), 'low')

# Generate a noisy signal
t = np.arange(0, 1, 1/fs)  # Time vector
s = np.sin(2 * np.pi * 100 * t)
signal = np.sin(2 * np.pi * 100 * t) + 0.5 * np.random.randn(len(t))  # Original signal + noise

# Apply the low-pass filter to remove high-frequency noise
filtered_signal = lfilter(b, a, signal)

plt.figure()
plt.subplot(3, 1, 1)
plt.plot(t, s)
plt.title('Original Signal')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')

plt.subplot(3, 1, 2)
plt.plot(t, signal)
plt.title('Original Signal (with Noise)')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')

plt.subplot(3, 1, 3)
plt.plot(t, filtered_signal)
plt.title('Filtered Signal (Low-Pass)')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')

plt.tight_layout()
plt.show()

8. High-Pass Filter
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, lfilter

fs = 1000  # Sampling frequency (Hz)
fc = 50    # Cutoff frequency of the filter (Hz)
order = 6  # Filter order

# Create a high-pass Butterworth filter
b, a = butter(order, fc / (fs/2), 'high')

# Generate a noisy signal
t = np.arange(0, 1, 1/fs)  # Time vector
s = np.sin(2 * np.pi * 100 * t)
signal = np.sin(2 * np.pi * 100 * t) + 0.5 * np.random.randn(len(t))  # Original signal + noise

# Apply the high-pass filter to remove low-frequency noise
filtered_signal = lfilter(b, a, signal)

plt.figure()
plt.subplot(3, 1, 1)
plt.plot(t, s)
plt.title('Original Signal')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')

plt.subplot(3, 1, 2)
plt.plot(t, signal)
plt.title('Original Signal (with Noise)')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')

plt.subplot(3, 1, 3)
plt.plot(t, filtered_signal)
plt.title('Filtered Signal (High-Pass)')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')

plt.tight_layout()
plt.show()

9. Band-Pass Filter
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, lfilter

fs = 1000       # Sampling frequency (Hz)
f_low = 50      # Lower cutoff frequency of the filter (Hz)
f_high = 150    # Upper cutoff frequency of the filter (Hz)
order = 6       # Filter order

# Create a band-pass Butterworth filter
b, a = butter(order, [f_low/(fs/2), f_high/(fs/2)], 'bandpass')

# Generate a signal with frequency components within the passband
t = np.arange(0, 1, 1/fs)  # Time vector
signal = 0.5*np.sin(2*np.pi*75*t) + 0.3*np.sin(2*np.pi*125*t) + 0.2*np.sin(2*np.pi*300*t)

# Apply the band-pass filter to retain the frequency range of interest
filtered_signal = lfilter(b, a, signal)

plt.figure()
plt.subplot(2, 1, 1)
plt.plot(t, signal)
plt.title('Original Signal (with Frequency Components)')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')

plt.subplot(2, 1, 2)
plt.plot(t, filtered_signal)
plt.title('Filtered Signal (Band-Pass)')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')

plt.tight_layout()
plt.show()

10. Unit Step Function

import numpy as np
import matplotlib.pyplot as plt

n = np.arange(-10, 11)
u = np.heaviside(n, 1)

plt.stem(n, u)
plt.xlabel('n')
plt.title('Unit Step Function')
plt.show()

12. Ramp Function
python

import numpy as np
import matplotlib.pyplot as plt

n = np.arange(-10, 11)
ramp = n * np.where(n >= 0, 1, 0)

plt.stem(n, ramp)
plt.xlabel('n')
plt.title('Ramp Function')
plt.show()
13. Time Shifting (x[n - 3])
python

import numpy as np
import matplotlib.pyplot as plt

x = np.array([1, 2, 3, 2, 4])
nx = np.arange(-2, 3)

n_shifted = nx + 3

plt.subplot(2, 1, 1)
plt.stem(nx, x)
plt.title('Graphical representation of x[n]')
plt.subplot(2, 1, 2)
plt.stem(n_shifted, x)
plt.title('Graphical representation of x[n - 3]')
plt.show()
14. Time Scaling (x[3n])
python

import numpy as np
import matplotlib.pyplot as plt

x = np.array([1, 2, 3, 2, 4])
nx = np.arange(-2, 3)

n_scaled = 3 * nx

plt.subplot(2, 1, 1)
plt.stem(nx, x)
plt.title('Graphical representation of x[n]')
plt.subplot(2, 1, 2)
plt.stem(n_scaled, x)
plt.title('Graphical representation of x[3n]')
plt.show()
15. Folding or Time Reversal (x[-n])
python

import numpy as np
import matplotlib.pyplot as plt

x = np.array([1, 2, 3, 2, 4])
nx = np.arange(-2, 3)

n_reversed = -1 * nx[::-1]

plt.subplot(2, 1, 1)
plt.stem(nx, x)
plt.title('Graphical representation of x[n]')
plt.subplot(2, 1, 2)
plt.stem(n_reversed, x[::-1])
plt.title('Graphical representation of x[-n]')
plt.show()